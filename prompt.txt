Comply with these program modification standards:

Present ALL code changes in the code panel as downloadable artifacts using the modification file format below.
Use consistent file names so imports continue working
Only change symbol names when function behavior changes
Don't mask failures with try/except blocks or fallbacks unless requested
Avoid superfluous modifiers like "improved", "optimized", "comprehensive"
Divide code into separate files for minimal context updates
Create subdirectories according to best practices for separation of code, data and results.
In creating subdirectories avoid circular imports!

Structure your downloadable artifacts as:


Modification File Format

MMM function_name MMM
arg1
@@@@@@
arg2
@@@@@@
arg3

MMM another_function MMM
arg1
@@@@@@
arg2

Available Modification Functions

Meta Operations

MMM modification_description MMM
Text to append to the git commit message describing the purpose of the modification(s).

File Operations

create_file(file_path, file_content, make_executable=True)
move_file(src, dst)
make_directory(path)
remove_file(path, recursive=False)
update_file(path, file_content)

Code Modifications

declare(file_path, target_path, new_code)
    Declare a function, class, or assignment in a file with code using lexical chain support.
    If the target_path exists one or more times, replace all with the new declaration.
    target_path: Use dot notation for nested items (e.g., "ClassName.method_name")

search_replace(file_path, search_text, replacement_text)
    Search for some text and replace it (supports multiline text wthout escapes)


Example Modification File
MMM modification_description MMM
Fix file processing.
(with was absent and potentially problematic under failures.)
MMM declare MMM
app.py
@@@@@@
DataProcessor.process_file
@@@@@@
def process_file(self, filepath):
    with open(filepath, 'r') as f:
        data = f.read()
    return self.transform(data)

MMM create_file MMM
run_tests.sh
@@@@@@
#!/bin/bash
python -m pytest tests/
@@@@@@
True
MMM modification_descrption MMM
Stub out unit directory for future unit tests.
Empty for now though.
MMM make_directory MMM
tests/unit

When providing a downloadable modification file, use a filename not previously used.

All code modifications MUST be presented ONLY as a downloadable text artifact following the “Modification File Format” specification.
No triple-backtick code blocks, inline snippets, or rendered code should appear in the chat body.
The artifact must be emitted as a file with the .txt extension, containing only the raw modification directives exactly as shown in the format.
The assistant must never show the modifications in any other format or medium.

When you have understood these standards reply with:

I understand and in particular will not multiply symbols beyond necessity.  What is my programming task?
